{"ast":null,"code":"import * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar randomID = () => {\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};\n\nvar findIndex = id => {\n  var {\n    tasks\n  } = this.state;\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: randomID(),\n        name: action.task.name,\n        status: action.task.name === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n\n    case types.UPDATE_STATUS_TASK:\n      var index = this.findIndex(id);\n\n      if (index !== -1) {\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n          tasks: tasks\n        });\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n      }\n\n      return [...state];\n  }\n\n  return state;\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/ngocson/Documents/Pj2 rd/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","randomID","findIndex","id","tasks","state","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","type","LIST_ALL","ADD_TASK","newTask","name","status","push","setItem","stringify","UPDATE_STATUS_TASK","setState"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;;AAEA,IAAIC,EAAE,GAAC,MAAI;AACP,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAED,IAAI,CAACE,MAAL,EAAH,IAAkB,OAA7B,EAAsCC,QAAtC,CAA+C,EAA/C,EAAmDC,SAAnD,CAA6D,CAA7D,CAAP;AACD,CAFH;;AAIA,IAAIC,QAAQ,GAAC,MAAI;AACb,SAAON,EAAE,KAAGA,EAAE,EAAP,GAAU,GAAV,GAAcA,EAAE,EAAhB,GAAmB,GAAnB,GAAuBA,EAAE,EAAzB,GAA4B,GAA5B,GAAgCA,EAAE,EAAlC,GAAqC,GAArC,GAAyCA,EAAE,EAA3C,GAA8CA,EAAE,EAAhD,GAAmDA,EAAE,EAA5D;AACD,CAFH;;AAIA,IAAKO,SAAS,GAAEC,EAAD,IAAM;AACjB,MAAI;AAACC,IAAAA;AAAD,MAAQ,KAAKC,KAAjB;AACA,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAMC,KAAN,KAAc;AAC1B,QAAGD,IAAI,CAACL,EAAL,KAAUA,EAAb,EAAgB;AACZG,MAAAA,MAAM,GAACG,KAAP;AACD;AACJ,GAJD;AAKA,SAAOH,MAAP;AAED,CAVH;;AAYA,IAAII,IAAI,GAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAV;AACA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAAjC;;AAEA,IAAIM,SAAS,GAAG,CAACX,KAAK,GAAGU,YAAT,EAAuBE,MAAvB,KAAiC;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKxB,KAAK,CAACyB,QAAX;AACI,aAAOd,KAAP;;AACJ,SAAKX,KAAK,CAAC0B,QAAX;AACI,UAAIC,OAAO,GAAG;AACVlB,QAAAA,EAAE,EAAEF,QAAQ,EADF;AAEVqB,QAAAA,IAAI,EAAEL,MAAM,CAACT,IAAP,CAAYc,IAFR;AAGVC,QAAAA,MAAM,EAAEN,MAAM,CAACT,IAAP,CAAYc,IAAZ,KAAmB,MAAnB,GAA4B,IAA5B,GAAmC;AAHjC,OAAd;AAKAjB,MAAAA,KAAK,CAACmB,IAAN,CAAWH,OAAX;AACAR,MAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAerB,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACA;AAAS,aAAOA,KAAP;;AACb,SAAKX,KAAK,CAACiC,kBAAX;AACI,UAAIlB,KAAK,GAAE,KAAKP,SAAL,CAAeC,EAAf,CAAX;;AACA,UAAGM,KAAK,KAAK,CAAC,CAAd,EAAgB;AACZL,QAAAA,KAAK,CAACK,KAAD,CAAL,CAAac,MAAb,GAAsB,CAACnB,KAAK,CAACK,KAAD,CAAL,CAAac,MAApC;AACA,aAAKK,QAAL,CAAc;AACZxB,UAAAA,KAAK,EAAEA;AADK,SAAd;AAGFS,QAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAetB,KAAf,CAA9B;AACD;;AACD,aAAO,CAAC,GAAGC,KAAJ,CAAP;AAtBR;;AAwBA,SAAOA,KAAP;AACH,CA1BD;;AA4BA,eAAeW,SAAf","sourcesContent":["\nimport * as types from './../constants/ActionTypes';\n\nvar s4=()=>{\n    return Math.floor((1+Math.random())*0x10000).toString(16).substring(1);\n  };\n\nvar randomID=()=>{\n    return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();\n  };\n\nvar  findIndex=(id)=>{\n    var {tasks}=this.state;\n    var result = -1;\n    tasks.forEach((task,index)=>{\n      if(task.id===id){\n          result=index;    \n        }\n    });\n    return result;\n\n  }\n\nvar data= JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            var newTask = {\n                id: randomID(),\n                name: action.task.name,\n                status: action.task.name==='true' ? true : false\n            }\n            state.push(newTask);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n            default: return state;\n        case types.UPDATE_STATUS_TASK:\n            var index =this.findIndex(id);\n            if(index !== -1){\n                tasks[index].status = !tasks[index].status;\n                this.setState({\n                  tasks: tasks\n              });\n              localStorage.setItem('tasks', JSON.stringify(tasks));\n            }\n            return [...state];\n    }\n    return state;\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}