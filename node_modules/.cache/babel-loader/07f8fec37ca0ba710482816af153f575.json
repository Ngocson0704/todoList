{"ast":null,"code":"import * as types from './../constants/ActionTypes';\n\nvar s4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nvar randomID = () => {\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};\n\nvar findIndex = (tasks, id) => {\n  var result = -1;\n  tasks.forEach((task, index) => {\n    if (task.id === id) {\n      result = index;\n    }\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: randomID(),\n        name: action.task.name,\n        status: action.task.status === true ? true : false\n      };\n      state.push(newTask);\n      console.log(state);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n\n    case types.UPDATE_STATUS_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state[index] = { ...state[index],\n        status: !state[index].status\n      };\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state.splice(index, 1);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/ngocson/Documents/Pj2 rd/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","randomID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","name","status","push","console","log","setItem","stringify","UPDATE_STATUS_TASK","DELETE_TASK","splice"],"mappings":"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","sourcesContent":["\nimport * as types from './../constants/ActionTypes';\n\nvar s4=()=>{\n    return Math.floor((1+Math.random())*0x10000).toString(16).substring(1);\n  };\n\nvar randomID=()=>{\n    return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();\n  };\n\nvar findIndex=(tasks,id)=>{\n    var result = -1;\n    tasks.forEach((task,index)=>{\n      if(task.id===id){\n          result=index;    \n        }\n    });\n    return result;\n\n  }\n\nvar data= JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            var newTask = {\n                id: randomID(),\n                name: action.task.name,\n                status: action.task.status === true ? true : false\n            }\n            state.push(newTask);\n            console.log(state);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n            default: return state;\n        case types.UPDATE_STATUS_TASK:\n            var id = action.id\n            var index =findIndex(state, id);\n            state[index]={\n                ...state[index],\n                status:!state[index].status\n            }\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return [...state];\n        case types.DELETE_TASK:\n            var id=action.id;\n            var index = findIndex(state,id);\n            state.splice(index,1);\n            localStorage.setItem('tasks', JSON.stringify(state));\n            return[...state];\n    }\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}