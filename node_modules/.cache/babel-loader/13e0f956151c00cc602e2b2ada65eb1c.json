{"ast":null,"code":"import * as types from './../constants/ActionTypes';\n\ns4 = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\ngenerateID = () => {\n  return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + this.s4() + this.s4();\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      console.log(action);\n      return state;\n\n    default:\n      return state;\n  }\n\n  return state;\n};\n\nexport default myReducer;","map":{"version":3,"sources":["/home/ngocson/Documents/Pj2 rd/src/reducers/tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","generateID","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","ADD_TASK","console","log"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;;AAEAC,EAAE,GAAC,MAAI;AACH,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAED,IAAI,CAACE,MAAL,EAAH,IAAkB,OAA7B,EAAsCC,QAAtC,CAA+C,EAA/C,EAAmDC,SAAnD,CAA6D,CAA7D,CAAP;AACD,CAFH;;AAIEC,UAAU,GAAC,MAAI;AACb,SAAO,KAAKN,EAAL,KAAU,KAAKA,EAAL,EAAV,GAAoB,GAApB,GAAwB,KAAKA,EAAL,EAAxB,GAAkC,GAAlC,GAAsC,KAAKA,EAAL,EAAtC,GAAgD,GAAhD,GAAoD,KAAKA,EAAL,EAApD,GAA8D,GAA9D,GAAkE,KAAKA,EAAL,EAAlE,GAA4E,KAAKA,EAAL,EAA5E,GAAsF,KAAKA,EAAL,EAA7F;AACD,CAFD;;AAIF,IAAIO,IAAI,GAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAV;AACA,IAAIC,YAAY,GAAEL,IAAI,GAAGA,IAAH,GAAU,EAAhC;;AAEA,IAAIM,SAAS,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAiC;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKjB,KAAK,CAACkB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKf,KAAK,CAACmB,QAAX;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,aAAOD,KAAP;;AACA;AAAS,aAAOA,KAAP;AANjB;;AAQA,SAAOA,KAAP;AACH,CAVD;;AAYA,eAAeD,SAAf","sourcesContent":["\nimport * as types from './../constants/ActionTypes';\n\ns4=()=>{\n    return Math.floor((1+Math.random())*0x10000).toString(16).substring(1);\n  };\n\n  generateID=()=>{\n    return this.s4()+this.s4()+'-'+this.s4()+'-'+this.s4()+'-'+this.s4()+'-'+this.s4()+this.s4()+this.s4();\n  };\n\nvar data= JSON.parse(localStorage.getItem('tasks'));\nvar initialState =data ? data : [];\n\nvar myReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n        case types.ADD_TASK:\n            console.log(action);\n            return state;\n            default: return state;\n    }\n    return state;\n}\n\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}